name: Deploy Azure Functions

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'functions/**'
      - '.github/workflows/deploy-functions.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'functions/**'
  workflow_dispatch:

env:
  AZURE_FUNCTIONAPP_NAME: 'companion-app-backends-functions'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './functions'
  NODE_VERSION: '18.x'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/package-lock.json'

    - name: 'Install Dependencies'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm ci
        popd

    # - name: 'Run Linting'
    #   shell: bash
    #   run: |
    #     pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
    #     npm run lint
    #     popd

    - name: 'Run Tests'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm run test:coverage
        popd

    - name: 'Upload Test Coverage'
      uses: codecov/codecov-action@v3
      with:
        file: ./${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/coverage/lcov.info
        flags: azure-functions

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/package-lock.json'

    - name: 'Install Dependencies'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm ci --only=production
        popd

    # --- THE STEPS BELOW ARE TEMPORARILY DISABLED FOR PIPELINE VALIDATION ---

    # - name: 'Login to Azure'
    #   uses: azure/login@v2
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: 'Deploy to Azure Functions'
    #   uses: Azure/functions-action@v1
    #   id: deploy-to-function
    #   with:
    #     app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
    #     package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
    #     publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

    # - name: 'Test Deployed Functions'
    #   shell: bash
    #   run: |
    #     # Wait for deployment to be ready
    #     sleep 30
        
    #     # Test health endpoint
    #     curl -f "https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/api/health" \
    #       -H "x-functions-key: ${{ secrets.FUNCTION_API_KEY }}" || exit 1
        
    #     echo "Functions deployed and healthy!"

  notify:
    runs-on: ubuntu-latest
    needs: [test, build-and-deploy]
    if: always()
    
    steps:
    - name: 'Notify Teams on Success'
      if: needs.test.result == 'success' && needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add Teams/Slack notification here
    
    - name: 'Notify Teams on Failure'
      if: needs.test.result == 'failure' || needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add Teams/Slack notification here```


