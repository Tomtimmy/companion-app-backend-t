/******************************************************************************************
 *  reportGenerator.js
 *  -----------------------------------------------------------------------
 *  Utility helpers for turning raw grader results (Language, Code-Quality,
 *  Component-Quality) into pretty / Markdown / JSON reports and then
 *  saving the result to disk.  Designed for the companion-app-backends Functions
 *  project (see folder: functions/src/utils).
 *
 *  USAGE
 *  -----
 *     const reportGen = require('./utils/reportGenerator');
 *
 *     // 1) Aggregate grader outputs (these come from the HTTP responses or
 *     //    direct-function calls inside Azure Functions)
 *     const combined = reportGen.combine({
 *       language   : languageResult,   // output from languageGrader
 *       quality    : codeQualityResult,// output from codeQualityGrader
 *       components : componentResult   // output from componentGrader
 *     });
 *
 *     // 2) Produce HTML and save
 *     const html = reportGen.toHtml(combined);
 *     await reportGen.save(html, './reports/qa-report.html');
 *
 *     // 3) Produce Markdown if you need to drop into GitHub comment
 *     const md = reportGen.toMarkdown(combined);
 *
 *     // 4) Or simply JSON stringify + save
 *     await reportGen.saveJson(combined, './reports/qa-report.json');
 *
 ******************************************************************************************/

const fs   = require('fs/promises');
const path = require('path');

/* -------------------------------------------------- Helpers  */

const badge = (ok) =>
  ok
    ? '<span style="color:#fff;background:#28a745;padding:2px 6px;border-radius:4px;font-size:12px;">PASS</span>'
    : '<span style="color:#fff;background:#dc3545;padding:2px 6px;border-radius:4px;font-size:12px;">FAIL</span>';

const percent = (score) => `${(score * 100).toFixed(1)} %`;

const formatJson = (obj) =>
  `<pre style="white-space:pre-wrap;background:#f9f9f9;border:1px solid #eee;padding:10px;border-radius:4px;">${JSON.stringify(
    obj,
    null,
    2
  )}</pre>`;

/* -------------------------------------------------- Core API  */

/**
 * Combine individual grader results into a single object.
 * Anything undefined is safely ignored.
 */
function combine({ language, quality, components, meta = {} }) {
  const startedAt = meta.startedAt || new Date().toISOString();

  return {
    meta: {
      startedAt,
      finishedAt: new Date().toISOString(),
      generatorVersion: '1.0.0'
    },
    language,
    quality,
    components
  };
}

/**
 * Render a full-featured HTML report.
 */
function toHtml(combined) {
  const { meta, language, quality, components } = combined;

  const section = (title, result) => {
    if (!result) return '';
    return `
      <section style="margin-bottom:30px;">
        <h2>${title} ${badge(result.success)}</h2>
        <p><strong>Score:</strong> ${percent(result.score)}</p>
        <details>
          <summary style="cursor:pointer;">Raw JSON</summary>
          ${formatJson(result.report)}
        </details>
      </section>`;
  };

  return `<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>Companion Grader ‚Äì QA Report</title>
<style>
  body{font-family:system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif;margin:40px;line-height:1.6;color:#333;}
  h1{margin-top:0;font-size:28px;}
  h2{margin-top:30px;font-size:22px;color:#0066cc;}
  table{border-collapse:collapse;margin-top:10px;}
  th,td{border:1px solid #ddd;padding:6px 10px;font-size:14px;}
  th{background:#f3f3f3;}
</style>
</head>
<body>

<h1>Companion Grader ‚Äì QA Report</h1>
<p><strong>Started:</strong> ${meta.startedAt}<br/>
<strong>Finished:</strong> ${meta.finishedAt}</p>

${section('Language Implementation', language)}
${section('Code Quality', quality)}
${section('Component Quality', components)}

<footer style="margin-top:60px;font-size:12px;color:#888;">
  Generated by Companion Grader reportGenerator.js
</footer>
</body>
</html>`;
}

/**
 * Render a compact Markdown report (ideal for GitHub comments).
 */
function toMarkdown(combined) {
  const { meta, language, quality, components } = combined;

  const mdSection = (title, res) =>
    res
      ? `### ${title} ${res.success ? '‚úÖ' : '‚ùå'}  
**Score:** ${percent(res.score)}  

<details><summary>Details</summary>

\`\`\`json
${JSON.stringify(res.report.summary || res.report, null, 2)}
\`\`\`
</details>\n`
      : '';

  return `
## üìù Companion Grader ‚Äì QA Summary

| Started | Finished |
|---------|----------|
| ${meta.startedAt} | ${meta.finishedAt} |

${mdSection('Language Implementation', language)}
${mdSection('Code Quality', quality)}
${mdSection('Component Quality', components)}

_This report was auto-generated by **Companion Grader**._`;
}

/**
 * Save a string (HTML/Markdown) to disk (creates directory tree automatically).
 */
async function save(content, outPath) {
  await fs.mkdir(path.dirname(outPath), { recursive: true });
  await fs.writeFile(outPath, content, 'utf8');
}

/**
 * Convenience wrapper for saving JSON.
 */
async function saveJson(obj, outPath) {
  await save(JSON.stringify(obj, null, 2), outPath);
}

/* -------------------------------------------------- Exports  */
module.exports = {
  combine,
  toHtml,
  toMarkdown,
  save,
  saveJson
};
